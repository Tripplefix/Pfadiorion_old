var Orion = (function() {
    var i = 0;
    var mobile;
    var config = {
        //serverUrl: 'http://pfadiorion.ch/'
        serverUrl: '<not set>'
    };

    function setConfig(o, p, v) {
        // loop through all the properties of he object
        for (var i in o) {
            // when the value is an object call this function recursively
            if (isObj(o[i])) {
                alert('test');
                setConfig(o[i], p, v);

                // otherwise compare properties and set their value accordingly
            } else {
                if (i === p) {
                    o[p] = v;
                }
            }
        }
    }

    function isObj(o) {
        // tests if a parameter is an object (and not an array)
        return (typeof o === 'object' && typeof o.splice !== 'function');
    }
    
    function hasClass(o, className){
        if (o.classList)
            return o.classList.contains(className);
        else
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(o.className);
    }
    
    function addClass(o, className){
        if (o.classList)
            o.classList.add(className);
        else
            o.className += ' ' + className;
    }
    
    function removeClass(o, className){
        if (o.classList)
            o.classList.remove(className);
        else
            o.className = o.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }

    function setNavigation() {
        var winHeight = window.outerHeight,
            winWidth = window.outerWidth,
            scrollTop = document.body.scrollTop || window.pageYOffset,
            _body = document.getElementsByTagName("body")[0],
            url = config.serverUrl;
        
        function msg(txt) {
            console.log(txt);
        }
        
        var bigNav = document.getElementById('big_nav'),
            smallNav = document.getElementById('small_nav'),
            tabletNav = document.getElementById('tablet_nav_container'),
            smallScoutLily = document.getElementById('small_scout_lily');

        tabletNav.addEventListener('click', function(){
            if(hasClass(document.getElementById('tablet_nav'), 'hidden')){
                removeClass(document.getElementById('tablet_nav'), 'hidden');
            }else{
                addClass(document.getElementById('tablet_nav'), 'hidden');
            }
        });
        
        window.addEventListener('load', setNav());

        window.addEventListener('scroll', function(){
            scrollTop = document.body.scrollTop || window.pageYOffset;
            
            smallScoutLily.addEventListener('click', function(){
                //todo
            });
            
            if (!mobile) {
                //small navigation
                if (scrollTop > winHeight - 50) {
                    smallNav.style.marginTop = '0';
                } else if (scrollTop <= winHeight - 100) {
                    smallNav.style.marginTop = '-60px';
                }

                //big navigation
                if (scrollTop <= 80) {
                    removeClass(bigNav, 'bignav_hidden');
                } else {
                    addClass(bigNav, 'bignav_hidden');
                }
            }
        });
        
        window.addEventListener('resize', setNav());

        function setNav() {
            winHeight = window.outerHeight;
            winWidth = window.outerWidth;
            if(mobile) {                
                smallNav.style.display = 'none';
                bigNav.style.display = 'none';
                tabletNav.style.display = 'initial';
            } else {                
                smallNav.style.display = 'initial';
                bigNav.style.display = 'initial';
                tabletNav.style.display = 'none';
            }
        }
    }

    return {
        init: function(args, callback) {
            // --------------- set configuration ---------------
            // check if the first argument is an object
            if (isObj(args)) {
                // loop through arguments and alter the configuration
                for (var i in args) {
                    setConfig(config, i, args[i]);
                }
            }

            // --------------- check if site is loaded on a mobile(touchscreen) device ---------------
            /*if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
             $('html').addClass('mobile');
             }*/

            // --------------- set event handlers ---------------
            //currently no events 
            
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                mobile = true;
            } else {
                mobile = false;
            }

            setNavigation();
            
            if(callback !== 'undefined' && typeof callback === 'function'){
                callback();
            }
        },
        isMobile: function() {
            return mobile;
        },
        colors: {
            red: '#CC3D18',
            violet: '#4710B5',
            white: '#FFF',
            black: '#000'
        },
        url: function() {
            return config.serverUrl;
        },
        /*loadScripts: function loadScript(scripts, callback) {
            //this function will work cross-browser for loading scripts asynchronously
            var script, done, t;
            done = false;
            script = document.createElement('script');
            //s.type = 'text/javascript';
            script.src = scripts[i];
            script.onload = script.onreadystatechange = function() {
                if (!done && (!this.readyState || this.readyState === 'complete'))
                {
                    done = true;
                    if(callback !== 'undefined' && typeof callback === 'function'){
                        callback('scripts loaded123');
                    }
                    
                    i++;
                    if (i < scripts.length) {
                        loadScript(scripts);
                    }
                }            
            };
            t = document.getElementsByTagName('script')[0];
            t.parentNode.insertBefore(script, t);
        },
        loadStyleSheets: function loadStyle(sheets, callback) {
            var script, done, t;
            done = false;
            script = document.createElement('link');
            script.rel = 'stylesheet';
            script.href = sheets[i];
            script.onload = script.onreadystatechange = function() {
                if (!done && (!this.readyState || this.readyState === 'complete'))
                {
                    done = true;
                    if(callback !== 'undefined' && typeof callback === 'function'){
                        console.log('styles loaded');
                        callback();
                    }
                    i++;
                    if (i < sheets.length) {
                        loadStyle(sheets);
                    }
                }
            };
            t = document.getElementsByTagName('link')[0];
            t.parentNode.insertBefore(script, t);            
        },*/
        
        loadScripts: function loadScript(scripts, callback) {
            var scriptCount = scripts.length;
            var loadedCount = 0;
            
            scripts.forEach(function(src){                
                var script, done, t;
                done = false;
                script = document.createElement('script');
                //s.type = 'text/javascript';
                script.src = src;
                script.onload = script.onreadystatechange = function() {
                    if (!done && (!this.readyState || this.readyState === 'complete'))
                    {
                        done = true;
                        loadedCount++;
                        
                        if(loadedCount === scriptCount){
                            if(callback !== 'undefined' && typeof callback === 'function'){
                                callback('scripts loaded');
                            }
                        }
                    }            
                };
                t = document.getElementsByTagName('script')[0];
                t.parentNode.insertBefore(script, t);
            });
        },
        loadStyles: function loadStyle(styles, callback) {
            var styleCount = styles.length;
            var loadedCount = 0;
            
            styles.forEach(function(src){       
                var style, done, t;
                done = false;
                style = document.createElement('link');
                style.rel = 'stylesheet';
                style.href = src;
                style.onload = style.onreadystatechange = function() {
                    if (!done && (!this.readyState || this.readyState === 'complete'))
                    {
                        done = true;
                        loadedCount++;
                        
                        if(loadedCount === styleCount){
                            if(callback !== 'undefined' && typeof callback === 'function'){
                                callback('styles loaded');
                            }
                        }
                    }
                };
                t = document.getElementsByTagName('link')[0];
                t.parentNode.insertBefore(style, t);     
            });
        }
    };
})();